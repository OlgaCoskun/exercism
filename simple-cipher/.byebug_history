exit
result.join("")
result
exit
LETTERS.take(1)
LETTERS.take
LETTERS.any
LETTERS.aby
LETTERS.sample
LETTERS
c
exit
ALPHABET.size
ALPHABET
exit
pl.split("")
pl.split
pl.join
pl.to_a
pl.split("")
pl
exit
ALPHABET = [*'a'..'z']
ALFABIT[((letter.ord - 'a'.ord) + index.ord - 'a'.ord)]
ALFABIT = LETTERS[0..25]
ALFABIT[((letter.ord - 'a'.ord) + index.ord - 'a'.ord)]
LETTERS[0..25][((letter.ord - 'a'.ord) + index.ord - 'a'.ord)]
LETTERS[0..25][(letter.ord - 'a'.ord + index.ord - 'a'.ord)]
index.ord
letter.ord - 'a'.ord
letter.ord
LETTERS[0..25]
exit
LETTERS[0..25]
LETTERS[1..25]
LETTERS[1..26]
LETTERS
exit
exut
letter.modulo(26)exit
letter.modulo(26)
LETTERS.length/2
'a'.ord
'a'.ord + letter.modulo(LETTERS.length / 2)
('a'.ord + letter.modulo(LETTERS.length / 2))
LETTERS.length/2
'a'.ord
exit
LETTERS.length/2
LETTERS.length
'a'.ord
letter
exit
letter.modulo
letter
letter.ord + d
letter.ord
key[index].ord
key[index]
index
letter
d = key[index].ord - 'a'.ord
exit
letter.ord + d
letter.ord
letter
letter[d]
d = key[index].ord - 'a'.ord
key[index].ord - 'a'.ord
key[index0].ord - 'a'.ord
'a'.ord
key[index].ord
key[index]
key
index
exit
c
index
letter
c
index
letter
c
index
letter
c
index
letter
exit
plaintext
exit
key[index]
index.ord
index
letter
exit
index
letter
exit
@cipher.encode(plaintext)
@cipher.key[0, 10]
exit
@cipher.key[0, 10]
@chiper
exit
key
exit
('a'..'z').to_a.sample
('a'..'z').to_a.take
('a'..'z').to_a.sample
('a'..'z').to_a.sample * 10
('a'..'z').to_a.sample
('a'..'z').cycle(2).to_a
key
exit
c
letter
index
c
key[index].ord - 97
index
key[index].ord
key[index]
index
c
letter.ord
index
letter
c
letter
index
plaintext.chars
exit
i
letter
plaintext.chars
plaintext
c
i
letter
exit
plaintext.chars
plaintext
c
exit
('a'..'z').to_a
@cipher.key[0, 10]
@cipher.encode(plaintext)
c
@cipher.encode(plaintext)
@cipher.key[0, 10]
@cipher
c
('a'..'z').to_a.sample * 10
@cipher
c
@cipher
('a'..'z').to_a.sample * 10
c
('a'..'z').to_a.sample * 10
LETTERS
@cipher
@cipher.key[0, 10]
exit
('a'..'z').to_a
@cipher.key[0, 10]
@cipher
exit
c
('a'..'z').cycle(1).to_a
('a'..'z').cycle.to_a
('a'..'z').cycle(2).to_a
